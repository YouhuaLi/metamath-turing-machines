/* All stack stuff are credit to https://github.com/sorear/metamath-turing-machines */
/* Cantor pair manipulation proctions */
/* t0 and t1 clobbered by pairing, also use t0 as blackhole a la MIPS */
global t0;
global t1;
global t2; 
global wstack;

/* NB If you change the pairing function, check the micro-optimisation in main() */
proc pair(out, in1, in2) {
    t0 = in1 + in2;
    out = in2 + (t0 * (t0 + 1)) / 2;
}

proc unpair(out1, out2, in) {
    t0 = 0;
    t1 = 0; /* invariant: t1 = t0 * (t0 + 1) / 2 */
    while (in >= t1) {
        t0 = t0 + 1;
        t1 = t1 + t0;
    }
    t1 = t1 - t0;
    t0 = t0 - 1;
    out2 = in - t1;
    out1 = t0 - out2;
}


proc push(stack, var) { pair(stack, var, stack); }
proc pop(var, stack) { unpair(var, stack, stack); }


/* initialize a stack by pushing 0 into it */
proc init_stack(stack) { t2 = 0; push(stack, t2); }

/* if stack is empty, out = 0, otherwise, out > 0 */
proc is_empty(wstack, out) {
    pop(out, wstack);
    push(wstack, out);
}

/* return log=floor(log_{base}{value}) with reaminder = value-base^log */
proc log_with_remainder(value, base, log, remainder){
    log = 0;
    remainder = 0;
    q = base;

    while (q <= value) {
        q = base * q;
        log = log + 1;
    }
    remainder = value - q;
}

 /* return p=x^y */
proc x_power_y(x, y, p) {
    i = 0;
    p = 1;
    while (i < y) {
        p = p * x;
        i = i + 1;
    }
}

proc stein_none_rescursive(n,d,s){
    s = 0;
    flag_log_phase = 1;
    r = n;
    last_s = 0;
    push(wstack, r);
    push(wstack, s);
    
    is_empty(wstack, t2);
    while (t2 > 0) {
    	pop(s, wstack);
    	pop(r, wstack);

        if (flag_log_phase == 1) {
            n = r;
            while (n > 0) {
            	log_with_remainder(n, d, n, r);
            	push(wstack, r);
            	r=0;
            	push(wstack, r);
            }
            flag_log_phase = 0;
            last_s = 0;
        } elsif(s==0) {
                s = last_s; 
                if (r < d){
                    x_power_y(d, s, s);
                    s = s + r;
                    /*s = (d+1) ** s + r;*/
                    push(wstack, r);
                    push(wstack, s);
                    /*l.append((r, s));*/
                    last_s = 0;
                }
                else{   
                    x_power_y(d, s, s);
                    push(wstack, r);
                    push(wstack, s);
                    /*s = (d+1) ** s;
                    l.append((r, s));
                    l.append((r, 0));*/
                    flag_log_phase = 1;
                }
            }
            else {
                s = s+last_s;
                last_s = s;
            }
    }
    s = s - 1;
}

proc main() {
    n = 128;
    base = 2;
    s = 1;
    while(s>0){
        stein_none_rescursive(n, base, s);
        base = base + 1;
        n = s;
    }
    return;
}