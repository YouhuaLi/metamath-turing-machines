/* All stack stuff are credit to https://github.com/sorear/metamath-turing-machines */
/* Cantor pair manipulation proctions */
/* t0 and t1 clobbered by pairing, also use t0 as blackhole a la MIPS */
global t0;
global t1;
global t2;
global t3;
global wstack;

proc pair(out, in1, in2) {
    t0 = in1 + in2;
    out = in2 + (t0 * (t0 + 1)) / 2;
}

proc unpair(out1, out2, in) {
    t0 = 0;
    t1 = 0; /* invariant: t1 = t0 * (t0 + 1) / 2 */
    while (in >= t1) {
        t0 = t0 + 1;
        t1 = t1 + t0;
    }
    t1 = t1 - t0;
    t0 = t0 - 1;
    out2 = in - t1;
    out1 = t0 - out2;
}


proc push(stack, var) { t0 = var + 1; pair(stack, t0, stack); }
proc pop(var, stack) { unpair(var, stack, stack); var = var - 1;}


/* initialize a stack by set it to be 0 */
proc init_stack(stack) { stack = 0; }

proc incr(x) {
    x = x + 1;
}

proc decr(x) {
    x = x - 1;
}

/* return log=floor(log_{base}{value}) with reaminder = value-base^log */
proc log_with_remainder(value, base, log, remainder){
    log = 0;
    remainder = 0;
    t0 = base;

    while (t0 <= value) {
        t0 = base * t0;
        incr(log);
    }
    remainder = value - t0 / base;
}

 /* return p=x^y */
proc x_power_y(x, y, p) {
    p = 1;
    while (y > 0) {
        p = p * x;
        y = y - 1;
    }
}

proc stein_none_rescursive(n, d, s){
    flag_log_phase = 1;
    r = n;
    last_s = 0;
    init_stack(wstack);
    push(wstack, r);
    push(wstack, last_s);
    
    while (wstack > 0) {
    	pop(s, wstack);
    	pop(r, wstack);

        if (flag_log_phase == 1) {
            n = r;
            while (n > 0) {
            	log_with_remainder(n, d, t2, t3);
            	push(wstack, t3);
            	t3 = 0;
            	push(wstack, t3);
                n = t2;
            }
            flag_log_phase = 0;
            last_s = 0;
        } elsif (s == 0) {
                s = last_s; 
                if (r < d){
                    /* s = (d+1) ** s + r; */
                    t3 = d + 1; 
                    x_power_y(t3, s, t2);
                    s = t2 + r;
                    /* l.append((r, s)); */
                    push(wstack, r);
                    push(wstack, s);
                    last_s = 0;
                }
                else{  
                    /*s = (d+1) ** s; */
                    t3 = d + 1;
                    x_power_y(t3, s, t2);
                    s = t2;
                    /*
                      l.append((r, s));
                      l.append((r, 0));
                    */
                    push(wstack, r);
                    push(wstack, s);
                    push(wstack, r);
                    t3 = 0;
                    push(wstack, t3);
                    flag_log_phase = 1;
                }
            }
            else {
                s = s + last_s;
                last_s = s;
            }
    }
    /* there is no negative value in nql. if s=0, s-1=0.*/
    s = s - 1; 
}

proc main() {
    n = 947;
    base = 2;
    s = 1;
    while( s > 0 ){
        stein_none_rescursive(n, base, s);
        incr(base);
        n = s;
    }
    return;
}

/* uncomment below if you want to see the machine can halt.
proc main() {
    n = 1;
    base = 2;
    s = 0;
    stein_none_rescursive(n, base, s);
    return;
} */