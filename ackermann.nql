/* All stack sutff are credit to https://github.com/sorear/metamath-turing-machines */
/* Cantor pair manipulation proctions */
/* t0 and t1 clobbered by pairing, also use t0 as blackhole a la MIPS */
global t0;
global t1;
global t2; 
global wstack;

/* NB If you change the pairing function, check the micro-optimisation in main() */
proc pair(out, in1, in2) {
    t0 = in1 + in2;
    out = in2 + (t0 * (t0 + 1)) / 2;
}

proc unpair(out1, out2, in) {
    t0 = 0;
    t1 = 0; /* invariant: t1 = t0 * (t0 + 1) / 2 */
    while (in >= t1) {
        t0 = t0 + 1;
        t1 = t1 + t0;
    }
    t1 = t1 - t0;
    t0 = t0 - 1;
    out2 = in - t1;
    out1 = t0 - out2;
}


proc push(stack, var) { pair(stack, var, stack); }
proc pop(var, stack) { unpair(var, stack, stack); }


/* initialize a stack by pushing 0 into it */
proc init_stack(stack) { t2 = 0; push(stack, t2); }

/* if stack is 0, out = 0, otherwise, out > 0 */
proc is_empty(wstack, out) {
    pop(out, wstack);
    push(wstack, out);
}

/* Ackermann function. output in n. Based on https://stackoverflow.com/questions/10742322/how-to-rewrite-ackermann-function-in-non-recursive-style, answer from 
Lightyear Buzz */
proc ackermann(m, n){
    t2 = m + 1;
    push(wstack, t2);

    is_empty(wstack, t2);

    while (t2 > 0) {
      pop(t2, wstack);
      m = t2 - 1;
      
      if ( m == 0 || n == 0 ){
        n = n + m + 1;
      } else {
          m = m - 1;
          t2 = m + 1;
          push(wstack, t2);
          
          m = m + 1;
          t2= m + 1;
          push(wstack, t2);

          n = n - 1;
      }
      is_empty(wstack, t2);
    }
    return;
}

global m;
global n;

proc main() {
    init_stack(wstack);

    m = 1;
    n = 1;
    ackermann(m, n);
    return;
}